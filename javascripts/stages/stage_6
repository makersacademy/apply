/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$code', '$new', '$find', '$css']);
  return (function($base) {
    var self = $module($base, 'Stages');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Stage6(){};
      var self = $Stage6 = $klass($base, $super, 'Stage6', $Stage6);

      var def = self.$$proto, $scope = self.$$scope;

      def.$display_code = function() {
        var self = this;

        return "puts \"Hello \#{upper(name)}\"\nputs \"Hello \#{lower(name)}\"\nputs \"Hello \#{random_name}\"\nputs \"Hello \#{random_case(name)}\"\nputs \"Hello \#{random_both}\"\n";
      };

      def.$code = function() {
        var self = this;

        return "      " + ($scope.get('Stage5').$new().$code()) + "\nputs \"Hello \#{random_both}\"\n\nresult = 1.upto(100).inject([]) do |memo, number|\n  memo << random_both\nend\n\nif (result.count('NIKESH') > 0) and (result.count('nikesh') > 0) and (result.count(name.upcase) > 0) and (result.count(name.downcase) > 0)\n  true\nelse\n  puts \"please ensure your `random_both` returns either upper case or lower case, and each of the two names randomly.\"\nend\n";
      };

      def.$instructions = function() {
        var self = this;

        return "Well done!</br></br>\nNow please implement a method called `random_both` that will return a lower or upper case version of the two names at random.  Do not delete the previous methods.\n";
      };

      return (def.$next_stage = function() {
        var self = this, ycbm = nil;

        ycbm = $scope.get('Element').$find("#youcanbookme");
        ycbm.$css("display", "block");
        return nil;
      }, nil) && 'next_stage';
    })(self, null)
  })(self)
})(Opal);

//# sourceMappingURL=stage_6.map
;
